generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  GYM_OWNER
  STAFF
  MEMBER
}

model User {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName   String
  lastName    String
  phone       String
  email       String
  role        UserRole
  ownedGyms   Gym[]           @relation("OwnedGyms")
  memberships GymMembership[] @relation("UserGymMemberships")
  bookings    Booking[]       @relation("UserBookings")
  payments    Payment[]
  invoices    Invoice[]
  createdAt   DateTime        @default(dbgenerated("now()"))
}

model Gym {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  phone           String
  email           String
  address         String
  logo            String?
  ownerId         String           @db.Uuid
  owner           User             @relation(fields: [ownerId], references: [id], name: "OwnedGyms", onDelete: Cascade)
  members         GymMembership[]  @relation("GymMemberships")
  membershipPlans MembershipPlan[]
  sessions        Session[]
  bookings        Booking[]
  payments        Payment[]
  invoices        Invoice[]
  createdAt       DateTime         @default(dbgenerated("now()"))
}

model GymMembership {
  user   User   @relation(fields: [userId], references: [id], name: "UserGymMemberships", onDelete: Cascade)
  userId String @db.Uuid
  gym    Gym    @relation(fields: [gymId], references: [id], name: "GymMemberships", onDelete: Cascade)
  gymId  String @db.Uuid

  @@id([userId, gymId])
}

model MembershipPlan {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gym             Gym      @relation(fields: [gymId], references: [id], onDelete: Cascade)
  gymId           String   @db.Uuid
  name            String
  price           Int
  periodInSeconds Int
  createdAt       DateTime @default(dbgenerated("now()"))
}

model Session {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gym       Gym       @relation(fields: [gymId], references: [id], onDelete: Cascade)
  gymId     String    @db.Uuid
  name      String
  startTime DateTime
  period    Int
  type      String
  bookings  Booking[]
  createdAt DateTime  @default(dbgenerated("now()"))
}

model Booking {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gym       Gym      @relation(fields: [gymId], references: [id], onDelete: Cascade)
  gymId     String   @db.Uuid
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String   @db.Uuid
  member    User     @relation(fields: [memberId], references: [id], name: "UserBookings", onDelete: Cascade)
  memberId  String   @db.Uuid
  createdAt DateTime @default(dbgenerated("now()"))
}

model Payment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gym       Gym      @relation(fields: [gymId], references: [id], onDelete: Cascade)
  gymId     String   @db.Uuid
  member    User     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String   @db.Uuid
  amount    Int // Payment amount
  createdAt DateTime @default(dbgenerated("now()"))
}

model Invoice {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gym       Gym      @relation(fields: [gymId], references: [id], onDelete: Cascade)
  gymId     String   @db.Uuid
  member    User     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String   @db.Uuid
  total     Int // Invoice total
  createdAt DateTime @default(dbgenerated("now()"))
}
